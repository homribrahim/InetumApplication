{"ast":null,"code":"import { Directive, ElementRef, NgModule, InjectionToken, ɵɵdefineInjectable, ɵɵinject, Injectable, Inject, ComponentFactoryResolver, ApplicationRef, SecurityContext, INJECTOR, NgZone, Injector, Component, HostBinding, HostListener } from '@angular/core';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { Subject } from 'rxjs';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { DOCUMENT, CommonModule } from '@angular/common';\n\nclass ToastContainerDirective {\n  constructor(el) {\n    this.el = el;\n  }\n\n  getContainerElement() {\n    return this.el.nativeElement;\n  }\n\n}\n\nToastContainerDirective.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[toastContainer]',\n    exportAs: 'toastContainer'\n  }]\n}];\n\nToastContainerDirective.ctorParameters = () => [{\n  type: ElementRef\n}];\n\nclass ToastContainerModule {}\n\nToastContainerModule.decorators = [{\n  type: NgModule,\n  args: [{\n    declarations: [ToastContainerDirective],\n    exports: [ToastContainerDirective]\n  }]\n}];\n/**\n * Everything a toast needs to launch\n */\n\nclass ToastPackage {\n  constructor(toastId, config, message, title, toastType, toastRef) {\n    this.toastId = toastId;\n    this.config = config;\n    this.message = message;\n    this.title = title;\n    this.toastType = toastType;\n    this.toastRef = toastRef;\n    this._onTap = new Subject();\n    this._onAction = new Subject();\n    this.toastRef.afterClosed().subscribe(() => {\n      this._onAction.complete();\n\n      this._onTap.complete();\n    });\n  }\n  /** Fired on click */\n\n\n  triggerTap() {\n    this._onTap.next();\n\n    if (this.config.tapToDismiss) {\n      this._onTap.complete();\n    }\n  }\n\n  onTap() {\n    return this._onTap.asObservable();\n  }\n  /** available for use in custom toast */\n\n\n  triggerAction(action) {\n    this._onAction.next(action);\n  }\n\n  onAction() {\n    return this._onAction.asObservable();\n  }\n\n}\n\nconst DefaultNoComponentGlobalConfig = {\n  maxOpened: 0,\n  autoDismiss: false,\n  newestOnTop: true,\n  preventDuplicates: false,\n  countDuplicates: false,\n  resetTimeoutOnDuplicate: false,\n  includeTitleDuplicates: false,\n  iconClasses: {\n    error: 'toast-error',\n    info: 'toast-info',\n    success: 'toast-success',\n    warning: 'toast-warning'\n  },\n  // Individual\n  closeButton: false,\n  disableTimeOut: false,\n  timeOut: 5000,\n  extendedTimeOut: 1000,\n  enableHtml: false,\n  progressBar: false,\n  toastClass: 'ngx-toastr',\n  positionClass: 'toast-top-right',\n  titleClass: 'toast-title',\n  messageClass: 'toast-message',\n  easing: 'ease-in',\n  easeTime: 300,\n  tapToDismiss: true,\n  onActivateTick: false,\n  progressAnimation: 'decreasing'\n};\nconst TOAST_CONFIG = new InjectionToken('ToastConfig');\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\n\nclass ComponentPortal {\n  constructor(component, injector) {\n    this.component = component;\n    this.injector = injector;\n  }\n  /** Attach this portal to a host. */\n\n\n  attach(host, newestOnTop) {\n    this._attachedHost = host;\n    return host.attach(this, newestOnTop);\n  }\n  /** Detach this portal from its host */\n\n\n  detach() {\n    const host = this._attachedHost;\n\n    if (host) {\n      this._attachedHost = undefined;\n      return host.detach();\n    }\n  }\n  /** Whether this portal is attached to a host. */\n\n\n  get isAttached() {\n    return this._attachedHost != null;\n  }\n  /**\n   * Sets the PortalHost reference without performing `attach()`. This is used directly by\n   * the PortalHost when it is performing an `attach()` or `detach()`.\n   */\n\n\n  setAttachedHost(host) {\n    this._attachedHost = host;\n  }\n\n}\n/**\n * Partial implementation of PortalHost that only deals with attaching a\n * ComponentPortal\n */\n\n\nclass BasePortalHost {\n  attach(portal, newestOnTop) {\n    this._attachedPortal = portal;\n    return this.attachComponentPortal(portal, newestOnTop);\n  }\n\n  detach() {\n    if (this._attachedPortal) {\n      this._attachedPortal.setAttachedHost();\n    }\n\n    this._attachedPortal = undefined;\n\n    if (this._disposeFn) {\n      this._disposeFn();\n\n      this._disposeFn = undefined;\n    }\n  }\n\n  setDisposeFn(fn) {\n    this._disposeFn = fn;\n  }\n\n}\n/**\n * A PortalHost for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n *\n * This is the only part of the portal core that directly touches the DOM.\n */\n\n\nclass DomPortalHost extends BasePortalHost {\n  constructor(_hostDomElement, _componentFactoryResolver, _appRef) {\n    super();\n    this._hostDomElement = _hostDomElement;\n    this._componentFactoryResolver = _componentFactoryResolver;\n    this._appRef = _appRef;\n  }\n  /**\n   * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n   * @param portal Portal to be attached\n   */\n\n\n  attachComponentPortal(portal, newestOnTop) {\n    const componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);\n\n    let componentRef; // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n    // for the component (in terms of Angular's component tree, not rendering).\n    // When the ViewContainerRef is missing, we use the factory to create the component directly\n    // and then manually attach the ChangeDetector for that component to the application (which\n    // happens automatically when using a ViewContainer).\n\n    componentRef = componentFactory.create(portal.injector); // When creating a component outside of a ViewContainer, we need to manually register\n    // its ChangeDetector with the application. This API is unfortunately not yet published\n    // in Angular core. The change detector must also be deregistered when the component\n    // is destroyed to prevent memory leaks.\n\n    this._appRef.attachView(componentRef.hostView);\n\n    this.setDisposeFn(() => {\n      this._appRef.detachView(componentRef.hostView);\n\n      componentRef.destroy();\n    }); // At this point the component has been instantiated, so we move it to the location in the DOM\n    // where we want it to be rendered.\n\n    if (newestOnTop) {\n      this._hostDomElement.insertBefore(this._getComponentRootNode(componentRef), this._hostDomElement.firstChild);\n    } else {\n      this._hostDomElement.appendChild(this._getComponentRootNode(componentRef));\n    }\n\n    return componentRef;\n  }\n  /** Gets the root HTMLElement for an instantiated component. */\n\n\n  _getComponentRootNode(componentRef) {\n    return componentRef.hostView.rootNodes[0];\n  }\n\n}\n/** Container inside which all toasts will render. */\n\n\nclass OverlayContainer {\n  constructor(_document) {\n    this._document = _document;\n  }\n\n  ngOnDestroy() {\n    if (this._containerElement && this._containerElement.parentNode) {\n      this._containerElement.parentNode.removeChild(this._containerElement);\n    }\n  }\n  /**\n   * This method returns the overlay container element. It will lazily\n   * create the element the first time  it is called to facilitate using\n   * the container in non-browser environments.\n   * @returns the container element\n   */\n\n\n  getContainerElement() {\n    if (!this._containerElement) {\n      this._createContainer();\n    }\n\n    return this._containerElement;\n  }\n  /**\n   * Create the overlay container element, which is simply a div\n   * with the 'cdk-overlay-container' class on the document body.\n   */\n\n\n  _createContainer() {\n    const container = this._document.createElement('div');\n\n    container.classList.add('overlay-container');\n\n    this._document.body.appendChild(container);\n\n    this._containerElement = container;\n  }\n\n}\n\nOverlayContainer.ɵprov = ɵɵdefineInjectable({\n  factory: function OverlayContainer_Factory() {\n    return new OverlayContainer(ɵɵinject(DOCUMENT));\n  },\n  token: OverlayContainer,\n  providedIn: \"root\"\n});\nOverlayContainer.decorators = [{\n  type: Injectable,\n  args: [{\n    providedIn: 'root'\n  }]\n}];\n\nOverlayContainer.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\n\n\nclass OverlayRef {\n  constructor(_portalHost) {\n    this._portalHost = _portalHost;\n  }\n\n  attach(portal, newestOnTop = true) {\n    return this._portalHost.attach(portal, newestOnTop);\n  }\n  /**\n   * Detaches an overlay from a portal.\n   * @returns Resolves when the overlay has been detached.\n   */\n\n\n  detach() {\n    return this._portalHost.detach();\n  }\n\n}\n/* tslint:disable:no-non-null-assertion */\n\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalHost, so any kind of Portal can be loaded into one.\n */\n\n\nclass Overlay {\n  constructor(_overlayContainer, _componentFactoryResolver, _appRef, _document) {\n    this._overlayContainer = _overlayContainer;\n    this._componentFactoryResolver = _componentFactoryResolver;\n    this._appRef = _appRef;\n    this._document = _document; // Namespace panes by overlay container\n\n    this._paneElements = new Map();\n  }\n  /**\n   * Creates an overlay.\n   * @returns A reference to the created overlay.\n   */\n\n\n  create(positionClass, overlayContainer) {\n    // get existing pane if possible\n    return this._createOverlayRef(this.getPaneElement(positionClass, overlayContainer));\n  }\n\n  getPaneElement(positionClass = '', overlayContainer) {\n    if (!this._paneElements.get(overlayContainer)) {\n      this._paneElements.set(overlayContainer, {});\n    }\n\n    if (!this._paneElements.get(overlayContainer)[positionClass]) {\n      this._paneElements.get(overlayContainer)[positionClass] = this._createPaneElement(positionClass, overlayContainer);\n    }\n\n    return this._paneElements.get(overlayContainer)[positionClass];\n  }\n  /**\n   * Creates the DOM element for an overlay and appends it to the overlay container.\n   * @returns Newly-created pane element\n   */\n\n\n  _createPaneElement(positionClass, overlayContainer) {\n    const pane = this._document.createElement('div');\n\n    pane.id = 'toast-container';\n    pane.classList.add(positionClass);\n    pane.classList.add('toast-container');\n\n    if (!overlayContainer) {\n      this._overlayContainer.getContainerElement().appendChild(pane);\n    } else {\n      overlayContainer.getContainerElement().appendChild(pane);\n    }\n\n    return pane;\n  }\n  /**\n   * Create a DomPortalHost into which the overlay content can be loaded.\n   * @param pane The DOM element to turn into a portal host.\n   * @returns A portal host for the given DOM element.\n   */\n\n\n  _createPortalHost(pane) {\n    return new DomPortalHost(pane, this._componentFactoryResolver, this._appRef);\n  }\n  /**\n   * Creates an OverlayRef for an overlay in the given DOM element.\n   * @param pane DOM element for the overlay\n   */\n\n\n  _createOverlayRef(pane) {\n    return new OverlayRef(this._createPortalHost(pane));\n  }\n\n}\n\nOverlay.ɵprov = ɵɵdefineInjectable({\n  factory: function Overlay_Factory() {\n    return new Overlay(ɵɵinject(OverlayContainer), ɵɵinject(ComponentFactoryResolver), ɵɵinject(ApplicationRef), ɵɵinject(DOCUMENT));\n  },\n  token: Overlay,\n  providedIn: \"root\"\n});\nOverlay.decorators = [{\n  type: Injectable,\n  args: [{\n    providedIn: 'root'\n  }]\n}];\n\nOverlay.ctorParameters = () => [{\n  type: OverlayContainer\n}, {\n  type: ComponentFactoryResolver\n}, {\n  type: ApplicationRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\n/**\n * Reference to a toast opened via the Toastr service.\n */\n\n\nclass ToastRef {\n  constructor(_overlayRef) {\n    this._overlayRef = _overlayRef;\n    /** Count of duplicates of this toast */\n\n    this.duplicatesCount = 0;\n    /** Subject for notifying the user that the toast has finished closing. */\n\n    this._afterClosed = new Subject();\n    /** triggered when toast is activated */\n\n    this._activate = new Subject();\n    /** notifies the toast that it should close before the timeout */\n\n    this._manualClose = new Subject();\n    /** notifies the toast that it should reset the timeouts */\n\n    this._resetTimeout = new Subject();\n    /** notifies the toast that it should count a duplicate toast */\n\n    this._countDuplicate = new Subject();\n  }\n\n  manualClose() {\n    this._manualClose.next();\n\n    this._manualClose.complete();\n  }\n\n  manualClosed() {\n    return this._manualClose.asObservable();\n  }\n\n  timeoutReset() {\n    return this._resetTimeout.asObservable();\n  }\n\n  countDuplicate() {\n    return this._countDuplicate.asObservable();\n  }\n  /**\n   * Close the toast.\n   */\n\n\n  close() {\n    this._overlayRef.detach();\n\n    this._afterClosed.next();\n\n    this._manualClose.next();\n\n    this._afterClosed.complete();\n\n    this._manualClose.complete();\n\n    this._activate.complete();\n\n    this._resetTimeout.complete();\n\n    this._countDuplicate.complete();\n  }\n  /** Gets an observable that is notified when the toast is finished closing. */\n\n\n  afterClosed() {\n    return this._afterClosed.asObservable();\n  }\n\n  isInactive() {\n    return this._activate.isStopped;\n  }\n\n  activate() {\n    this._activate.next();\n\n    this._activate.complete();\n  }\n  /** Gets an observable that is notified when the toast has started opening. */\n\n\n  afterActivate() {\n    return this._activate.asObservable();\n  }\n  /** Reset the toast timouts and count duplicates */\n\n\n  onDuplicate(resetTimeout, countDuplicate) {\n    if (resetTimeout) {\n      this._resetTimeout.next();\n    }\n\n    if (countDuplicate) {\n      this._countDuplicate.next(++this.duplicatesCount);\n    }\n  }\n\n}\n/** Custom injector type specifically for instantiating components with a toast. */\n\n\nclass ToastInjector {\n  constructor(_toastPackage, _parentInjector) {\n    this._toastPackage = _toastPackage;\n    this._parentInjector = _parentInjector;\n  }\n\n  get(token, notFoundValue, flags) {\n    if (token === ToastPackage) {\n      return this._toastPackage;\n    }\n\n    return this._parentInjector.get(token, notFoundValue, flags);\n  }\n\n}\n\nclass ToastrService {\n  constructor(token, overlay, _injector, sanitizer, ngZone) {\n    this.overlay = overlay;\n    this._injector = _injector;\n    this.sanitizer = sanitizer;\n    this.ngZone = ngZone;\n    this.currentlyActive = 0;\n    this.toasts = [];\n    this.index = 0;\n    this.toastrConfig = Object.assign(Object.assign({}, token.default), token.config);\n\n    if (token.config.iconClasses) {\n      this.toastrConfig.iconClasses = Object.assign(Object.assign({}, token.default.iconClasses), token.config.iconClasses);\n    }\n  }\n  /** show toast */\n\n\n  show(message, title, override = {}, type = '') {\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /** show successful toast */\n\n\n  success(message, title, override = {}) {\n    const type = this.toastrConfig.iconClasses.success || '';\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /** show error toast */\n\n\n  error(message, title, override = {}) {\n    const type = this.toastrConfig.iconClasses.error || '';\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /** show info toast */\n\n\n  info(message, title, override = {}) {\n    const type = this.toastrConfig.iconClasses.info || '';\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /** show warning toast */\n\n\n  warning(message, title, override = {}) {\n    const type = this.toastrConfig.iconClasses.warning || '';\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /**\n   * Remove all or a single toast by id\n   */\n\n\n  clear(toastId) {\n    // Call every toastRef manualClose function\n    for (const toast of this.toasts) {\n      if (toastId !== undefined) {\n        if (toast.toastId === toastId) {\n          toast.toastRef.manualClose();\n          return;\n        }\n      } else {\n        toast.toastRef.manualClose();\n      }\n    }\n  }\n  /**\n   * Remove and destroy a single toast by id\n   */\n\n\n  remove(toastId) {\n    const found = this._findToast(toastId);\n\n    if (!found) {\n      return false;\n    }\n\n    found.activeToast.toastRef.close();\n    this.toasts.splice(found.index, 1);\n    this.currentlyActive = this.currentlyActive - 1;\n\n    if (!this.toastrConfig.maxOpened || !this.toasts.length) {\n      return false;\n    }\n\n    if (this.currentlyActive < this.toastrConfig.maxOpened && this.toasts[this.currentlyActive]) {\n      const p = this.toasts[this.currentlyActive].toastRef;\n\n      if (!p.isInactive()) {\n        this.currentlyActive = this.currentlyActive + 1;\n        p.activate();\n      }\n    }\n\n    return true;\n  }\n  /**\n   * Determines if toast message is already shown\n   */\n\n\n  findDuplicate(title = '', message = '', resetOnDuplicate, countDuplicates) {\n    const {\n      includeTitleDuplicates\n    } = this.toastrConfig;\n\n    for (const toast of this.toasts) {\n      const hasDuplicateTitle = includeTitleDuplicates && toast.title === title;\n\n      if ((!includeTitleDuplicates || hasDuplicateTitle) && toast.message === message) {\n        toast.toastRef.onDuplicate(resetOnDuplicate, countDuplicates);\n        return toast;\n      }\n    }\n\n    return null;\n  }\n  /** create a clone of global config and apply individual settings */\n\n\n  applyConfig(override = {}) {\n    return Object.assign(Object.assign({}, this.toastrConfig), override);\n  }\n  /**\n   * Find toast object by id\n   */\n\n\n  _findToast(toastId) {\n    for (let i = 0; i < this.toasts.length; i++) {\n      if (this.toasts[i].toastId === toastId) {\n        return {\n          index: i,\n          activeToast: this.toasts[i]\n        };\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Determines the need to run inside angular's zone then builds the toast\n   */\n\n\n  _preBuildNotification(toastType, message, title, config) {\n    if (config.onActivateTick) {\n      return this.ngZone.run(() => this._buildNotification(toastType, message, title, config));\n    }\n\n    return this._buildNotification(toastType, message, title, config);\n  }\n  /**\n   * Creates and attaches toast data to component\n   * returns the active toast, or in case preventDuplicates is enabled the original/non-duplicate active toast.\n   */\n\n\n  _buildNotification(toastType, message, title, config) {\n    if (!config.toastComponent) {\n      throw new Error('toastComponent required');\n    } // max opened and auto dismiss = true\n    // if timeout = 0 resetting it would result in setting this.hideTime = Date.now(). Hence, we only want to reset timeout if there is\n    // a timeout at all\n\n\n    const duplicate = this.findDuplicate(title, message, this.toastrConfig.resetTimeoutOnDuplicate && config.timeOut > 0, this.toastrConfig.countDuplicates);\n\n    if ((this.toastrConfig.includeTitleDuplicates && title || message) && this.toastrConfig.preventDuplicates && duplicate !== null) {\n      return duplicate;\n    }\n\n    this.previousToastMessage = message;\n    let keepInactive = false;\n\n    if (this.toastrConfig.maxOpened && this.currentlyActive >= this.toastrConfig.maxOpened) {\n      keepInactive = true;\n\n      if (this.toastrConfig.autoDismiss) {\n        this.clear(this.toasts[0].toastId);\n      }\n    }\n\n    const overlayRef = this.overlay.create(config.positionClass, this.overlayContainer);\n    this.index = this.index + 1;\n    let sanitizedMessage = message;\n\n    if (message && config.enableHtml) {\n      sanitizedMessage = this.sanitizer.sanitize(SecurityContext.HTML, message);\n    }\n\n    const toastRef = new ToastRef(overlayRef);\n    const toastPackage = new ToastPackage(this.index, config, sanitizedMessage, title, toastType, toastRef);\n    const toastInjector = new ToastInjector(toastPackage, this._injector);\n    const component = new ComponentPortal(config.toastComponent, toastInjector);\n    const portal = overlayRef.attach(component, this.toastrConfig.newestOnTop);\n    toastRef.componentInstance = portal.instance;\n    const ins = {\n      toastId: this.index,\n      title: title || '',\n      message: message || '',\n      toastRef,\n      onShown: toastRef.afterActivate(),\n      onHidden: toastRef.afterClosed(),\n      onTap: toastPackage.onTap(),\n      onAction: toastPackage.onAction(),\n      portal\n    };\n\n    if (!keepInactive) {\n      this.currentlyActive = this.currentlyActive + 1;\n      setTimeout(() => {\n        ins.toastRef.activate();\n      });\n    }\n\n    this.toasts.push(ins);\n    return ins;\n  }\n\n}\n\nToastrService.ɵprov = ɵɵdefineInjectable({\n  factory: function ToastrService_Factory() {\n    return new ToastrService(ɵɵinject(TOAST_CONFIG), ɵɵinject(Overlay), ɵɵinject(INJECTOR), ɵɵinject(DomSanitizer), ɵɵinject(NgZone));\n  },\n  token: ToastrService,\n  providedIn: \"root\"\n});\nToastrService.decorators = [{\n  type: Injectable,\n  args: [{\n    providedIn: 'root'\n  }]\n}];\n\nToastrService.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [TOAST_CONFIG]\n  }]\n}, {\n  type: Overlay\n}, {\n  type: Injector\n}, {\n  type: DomSanitizer\n}, {\n  type: NgZone\n}];\n\nclass Toast {\n  constructor(toastrService, toastPackage, ngZone) {\n    this.toastrService = toastrService;\n    this.toastPackage = toastPackage;\n    this.ngZone = ngZone;\n    /** width of progress bar */\n\n    this.width = -1;\n    /** a combination of toast type and options.toastClass */\n\n    this.toastClasses = '';\n    /** controls animation */\n\n    this.state = {\n      value: 'inactive',\n      params: {\n        easeTime: this.toastPackage.config.easeTime,\n        easing: 'ease-in'\n      }\n    };\n    this.message = toastPackage.message;\n    this.title = toastPackage.title;\n    this.options = toastPackage.config;\n    this.originalTimeout = toastPackage.config.timeOut;\n    this.toastClasses = `${toastPackage.toastType} ${toastPackage.config.toastClass}`;\n    this.sub = toastPackage.toastRef.afterActivate().subscribe(() => {\n      this.activateToast();\n    });\n    this.sub1 = toastPackage.toastRef.manualClosed().subscribe(() => {\n      this.remove();\n    });\n    this.sub2 = toastPackage.toastRef.timeoutReset().subscribe(() => {\n      this.resetTimeout();\n    });\n    this.sub3 = toastPackage.toastRef.countDuplicate().subscribe(count => {\n      this.duplicatesCount = count;\n    });\n  }\n  /** hides component when waiting to be displayed */\n\n\n  get displayStyle() {\n    if (this.state.value === 'inactive') {\n      return 'none';\n    }\n\n    return;\n  }\n\n  ngOnDestroy() {\n    this.sub.unsubscribe();\n    this.sub1.unsubscribe();\n    this.sub2.unsubscribe();\n    this.sub3.unsubscribe();\n    clearInterval(this.intervalId);\n    clearTimeout(this.timeout);\n  }\n  /**\n   * activates toast and sets timeout\n   */\n\n\n  activateToast() {\n    this.state = Object.assign(Object.assign({}, this.state), {\n      value: 'active'\n    });\n\n    if (!(this.options.disableTimeOut === true || this.options.disableTimeOut === 'timeOut') && this.options.timeOut) {\n      this.outsideTimeout(() => this.remove(), this.options.timeOut);\n      this.hideTime = new Date().getTime() + this.options.timeOut;\n\n      if (this.options.progressBar) {\n        this.outsideInterval(() => this.updateProgress(), 10);\n      }\n    }\n  }\n  /**\n   * updates progress bar width\n   */\n\n\n  updateProgress() {\n    if (this.width === 0 || this.width === 100 || !this.options.timeOut) {\n      return;\n    }\n\n    const now = new Date().getTime();\n    const remaining = this.hideTime - now;\n    this.width = remaining / this.options.timeOut * 100;\n\n    if (this.options.progressAnimation === 'increasing') {\n      this.width = 100 - this.width;\n    }\n\n    if (this.width <= 0) {\n      this.width = 0;\n    }\n\n    if (this.width >= 100) {\n      this.width = 100;\n    }\n  }\n\n  resetTimeout() {\n    clearTimeout(this.timeout);\n    clearInterval(this.intervalId);\n    this.state = Object.assign(Object.assign({}, this.state), {\n      value: 'active'\n    });\n    this.outsideTimeout(() => this.remove(), this.originalTimeout);\n    this.options.timeOut = this.originalTimeout;\n    this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n    this.width = -1;\n\n    if (this.options.progressBar) {\n      this.outsideInterval(() => this.updateProgress(), 10);\n    }\n  }\n  /**\n   * tells toastrService to remove this toast after animation time\n   */\n\n\n  remove() {\n    if (this.state.value === 'removed') {\n      return;\n    }\n\n    clearTimeout(this.timeout);\n    this.state = Object.assign(Object.assign({}, this.state), {\n      value: 'removed'\n    });\n    this.outsideTimeout(() => this.toastrService.remove(this.toastPackage.toastId), +this.toastPackage.config.easeTime);\n  }\n\n  tapToast() {\n    if (this.state.value === 'removed') {\n      return;\n    }\n\n    this.toastPackage.triggerTap();\n\n    if (this.options.tapToDismiss) {\n      this.remove();\n    }\n  }\n\n  stickAround() {\n    if (this.state.value === 'removed') {\n      return;\n    }\n\n    clearTimeout(this.timeout);\n    this.options.timeOut = 0;\n    this.hideTime = 0; // disable progressBar\n\n    clearInterval(this.intervalId);\n    this.width = 0;\n  }\n\n  delayedHideToast() {\n    if (this.options.disableTimeOut === true || this.options.disableTimeOut === 'extendedTimeOut' || this.options.extendedTimeOut === 0 || this.state.value === 'removed') {\n      return;\n    }\n\n    this.outsideTimeout(() => this.remove(), this.options.extendedTimeOut);\n    this.options.timeOut = this.options.extendedTimeOut;\n    this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n    this.width = -1;\n\n    if (this.options.progressBar) {\n      this.outsideInterval(() => this.updateProgress(), 10);\n    }\n  }\n\n  outsideTimeout(func, timeout) {\n    if (this.ngZone) {\n      this.ngZone.runOutsideAngular(() => this.timeout = setTimeout(() => this.runInsideAngular(func), timeout));\n    } else {\n      this.timeout = setTimeout(() => func(), timeout);\n    }\n  }\n\n  outsideInterval(func, timeout) {\n    if (this.ngZone) {\n      this.ngZone.runOutsideAngular(() => this.intervalId = setInterval(() => this.runInsideAngular(func), timeout));\n    } else {\n      this.intervalId = setInterval(() => func(), timeout);\n    }\n  }\n\n  runInsideAngular(func) {\n    if (this.ngZone) {\n      this.ngZone.run(() => func());\n    } else {\n      func();\n    }\n  }\n\n}\n\nToast.decorators = [{\n  type: Component,\n  args: [{\n    selector: '[toast-component]',\n    template: `\n  <button *ngIf=\"options.closeButton\" (click)=\"remove()\" class=\"toast-close-button\" aria-label=\"Close\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n  <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n    {{ title }} <ng-container *ngIf=\"duplicatesCount\">[{{ duplicatesCount + 1 }}]</ng-container>\n  </div>\n  <div *ngIf=\"message && options.enableHtml\" role=\"alertdialog\" aria-live=\"polite\"\n    [class]=\"options.messageClass\" [innerHTML]=\"message\">\n  </div>\n  <div *ngIf=\"message && !options.enableHtml\" role=\"alertdialog\" aria-live=\"polite\"\n    [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n    {{ message }}\n  </div>\n  <div *ngIf=\"options.progressBar\">\n    <div class=\"toast-progress\" [style.width]=\"width + '%'\"></div>\n  </div>\n  `,\n    animations: [trigger('flyInOut', [state('inactive', style({\n      opacity: 0\n    })), state('active', style({\n      opacity: 1\n    })), state('removed', style({\n      opacity: 0\n    })), transition('inactive => active', animate('{{ easeTime }}ms {{ easing }}')), transition('active => removed', animate('{{ easeTime }}ms {{ easing }}'))])],\n    preserveWhitespaces: false\n  }]\n}];\n\nToast.ctorParameters = () => [{\n  type: ToastrService\n}, {\n  type: ToastPackage\n}, {\n  type: NgZone\n}];\n\nToast.propDecorators = {\n  toastClasses: [{\n    type: HostBinding,\n    args: ['class']\n  }],\n  state: [{\n    type: HostBinding,\n    args: ['@flyInOut']\n  }],\n  displayStyle: [{\n    type: HostBinding,\n    args: ['style.display']\n  }],\n  tapToast: [{\n    type: HostListener,\n    args: ['click']\n  }],\n  stickAround: [{\n    type: HostListener,\n    args: ['mouseenter']\n  }],\n  delayedHideToast: [{\n    type: HostListener,\n    args: ['mouseleave']\n  }]\n};\nconst DefaultGlobalConfig = Object.assign(Object.assign({}, DefaultNoComponentGlobalConfig), {\n  toastComponent: Toast\n});\n\nclass ToastrModule {\n  static forRoot(config = {}) {\n    return {\n      ngModule: ToastrModule,\n      providers: [{\n        provide: TOAST_CONFIG,\n        useValue: {\n          default: DefaultGlobalConfig,\n          config\n        }\n      }]\n    };\n  }\n\n}\n\nToastrModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [CommonModule],\n    declarations: [Toast],\n    exports: [Toast],\n    entryComponents: [Toast]\n  }]\n}];\n\nclass ToastrComponentlessModule {\n  static forRoot(config = {}) {\n    return {\n      ngModule: ToastrModule,\n      providers: [{\n        provide: TOAST_CONFIG,\n        useValue: {\n          default: DefaultNoComponentGlobalConfig,\n          config\n        }\n      }]\n    };\n  }\n\n}\n\nToastrComponentlessModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [CommonModule]\n  }]\n}];\n\nclass ToastNoAnimation {\n  constructor(toastrService, toastPackage, appRef) {\n    this.toastrService = toastrService;\n    this.toastPackage = toastPackage;\n    this.appRef = appRef;\n    /** width of progress bar */\n\n    this.width = -1;\n    /** a combination of toast type and options.toastClass */\n\n    this.toastClasses = '';\n    /** controls animation */\n\n    this.state = 'inactive';\n    this.message = toastPackage.message;\n    this.title = toastPackage.title;\n    this.options = toastPackage.config;\n    this.originalTimeout = toastPackage.config.timeOut;\n    this.toastClasses = `${toastPackage.toastType} ${toastPackage.config.toastClass}`;\n    this.sub = toastPackage.toastRef.afterActivate().subscribe(() => {\n      this.activateToast();\n    });\n    this.sub1 = toastPackage.toastRef.manualClosed().subscribe(() => {\n      this.remove();\n    });\n    this.sub2 = toastPackage.toastRef.timeoutReset().subscribe(() => {\n      this.resetTimeout();\n    });\n    this.sub3 = toastPackage.toastRef.countDuplicate().subscribe(count => {\n      this.duplicatesCount = count;\n    });\n  }\n  /** hides component when waiting to be displayed */\n\n\n  get displayStyle() {\n    if (this.state === 'inactive') {\n      return 'none';\n    }\n  }\n\n  ngOnDestroy() {\n    this.sub.unsubscribe();\n    this.sub1.unsubscribe();\n    this.sub2.unsubscribe();\n    this.sub3.unsubscribe();\n    clearInterval(this.intervalId);\n    clearTimeout(this.timeout);\n  }\n  /**\n   * activates toast and sets timeout\n   */\n\n\n  activateToast() {\n    this.state = 'active';\n\n    if (!(this.options.disableTimeOut === true || this.options.disableTimeOut === 'timeOut') && this.options.timeOut) {\n      this.timeout = setTimeout(() => {\n        this.remove();\n      }, this.options.timeOut);\n      this.hideTime = new Date().getTime() + this.options.timeOut;\n\n      if (this.options.progressBar) {\n        this.intervalId = setInterval(() => this.updateProgress(), 10);\n      }\n    }\n\n    if (this.options.onActivateTick) {\n      this.appRef.tick();\n    }\n  }\n  /**\n   * updates progress bar width\n   */\n\n\n  updateProgress() {\n    if (this.width === 0 || this.width === 100 || !this.options.timeOut) {\n      return;\n    }\n\n    const now = new Date().getTime();\n    const remaining = this.hideTime - now;\n    this.width = remaining / this.options.timeOut * 100;\n\n    if (this.options.progressAnimation === 'increasing') {\n      this.width = 100 - this.width;\n    }\n\n    if (this.width <= 0) {\n      this.width = 0;\n    }\n\n    if (this.width >= 100) {\n      this.width = 100;\n    }\n  }\n\n  resetTimeout() {\n    clearTimeout(this.timeout);\n    clearInterval(this.intervalId);\n    this.state = 'active';\n    this.options.timeOut = this.originalTimeout;\n    this.timeout = setTimeout(() => this.remove(), this.originalTimeout);\n    this.hideTime = new Date().getTime() + (this.originalTimeout || 0);\n    this.width = -1;\n\n    if (this.options.progressBar) {\n      this.intervalId = setInterval(() => this.updateProgress(), 10);\n    }\n  }\n  /**\n   * tells toastrService to remove this toast after animation time\n   */\n\n\n  remove() {\n    if (this.state === 'removed') {\n      return;\n    }\n\n    clearTimeout(this.timeout);\n    this.state = 'removed';\n    this.timeout = setTimeout(() => this.toastrService.remove(this.toastPackage.toastId));\n  }\n\n  tapToast() {\n    if (this.state === 'removed') {\n      return;\n    }\n\n    this.toastPackage.triggerTap();\n\n    if (this.options.tapToDismiss) {\n      this.remove();\n    }\n  }\n\n  stickAround() {\n    if (this.state === 'removed') {\n      return;\n    }\n\n    clearTimeout(this.timeout);\n    this.options.timeOut = 0;\n    this.hideTime = 0; // disable progressBar\n\n    clearInterval(this.intervalId);\n    this.width = 0;\n  }\n\n  delayedHideToast() {\n    if (this.options.disableTimeOut === true || this.options.disableTimeOut === 'extendedTimeOut' || this.options.extendedTimeOut === 0 || this.state === 'removed') {\n      return;\n    }\n\n    this.timeout = setTimeout(() => this.remove(), this.options.extendedTimeOut);\n    this.options.timeOut = this.options.extendedTimeOut;\n    this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n    this.width = -1;\n\n    if (this.options.progressBar) {\n      this.intervalId = setInterval(() => this.updateProgress(), 10);\n    }\n  }\n\n}\n\nToastNoAnimation.decorators = [{\n  type: Component,\n  args: [{\n    selector: '[toast-component]',\n    template: `\n  <button *ngIf=\"options.closeButton\" (click)=\"remove()\" class=\"toast-close-button\" aria-label=\"Close\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n  <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n    {{ title }} <ng-container *ngIf=\"duplicatesCount\">[{{ duplicatesCount + 1 }}]</ng-container>\n  </div>\n  <div *ngIf=\"message && options.enableHtml\" role=\"alert\" aria-live=\"polite\"\n    [class]=\"options.messageClass\" [innerHTML]=\"message\">\n  </div>\n  <div *ngIf=\"message && !options.enableHtml\" role=\"alert\" aria-live=\"polite\"\n    [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n    {{ message }}\n  </div>\n  <div *ngIf=\"options.progressBar\">\n    <div class=\"toast-progress\" [style.width]=\"width + '%'\"></div>\n  </div>\n  `\n  }]\n}];\n\nToastNoAnimation.ctorParameters = () => [{\n  type: ToastrService\n}, {\n  type: ToastPackage\n}, {\n  type: ApplicationRef\n}];\n\nToastNoAnimation.propDecorators = {\n  toastClasses: [{\n    type: HostBinding,\n    args: ['class']\n  }],\n  displayStyle: [{\n    type: HostBinding,\n    args: ['style.display']\n  }],\n  tapToast: [{\n    type: HostListener,\n    args: ['click']\n  }],\n  stickAround: [{\n    type: HostListener,\n    args: ['mouseenter']\n  }],\n  delayedHideToast: [{\n    type: HostListener,\n    args: ['mouseleave']\n  }]\n};\nconst DefaultNoAnimationsGlobalConfig = Object.assign(Object.assign({}, DefaultNoComponentGlobalConfig), {\n  toastComponent: ToastNoAnimation\n});\n\nclass ToastNoAnimationModule {\n  static forRoot(config = {}) {\n    return {\n      ngModule: ToastNoAnimationModule,\n      providers: [{\n        provide: TOAST_CONFIG,\n        useValue: {\n          default: DefaultNoAnimationsGlobalConfig,\n          config\n        }\n      }]\n    };\n  }\n\n}\n\nToastNoAnimationModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [CommonModule],\n    declarations: [ToastNoAnimation],\n    exports: [ToastNoAnimation],\n    entryComponents: [ToastNoAnimation]\n  }]\n}];\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BasePortalHost, ComponentPortal, DefaultGlobalConfig, DefaultNoAnimationsGlobalConfig, DefaultNoComponentGlobalConfig, Overlay, OverlayContainer, OverlayRef, TOAST_CONFIG, Toast, ToastContainerDirective, ToastContainerModule, ToastInjector, ToastNoAnimation, ToastNoAnimationModule, ToastPackage, ToastRef, ToastrComponentlessModule, ToastrModule, ToastrService };","map":{"version":3,"names":["Directive","ElementRef","NgModule","InjectionToken","ɵɵdefineInjectable","ɵɵinject","Injectable","Inject","ComponentFactoryResolver","ApplicationRef","SecurityContext","INJECTOR","NgZone","Injector","Component","HostBinding","HostListener","trigger","state","style","transition","animate","Subject","DomSanitizer","DOCUMENT","CommonModule","ToastContainerDirective","constructor","el","getContainerElement","nativeElement","decorators","type","args","selector","exportAs","ctorParameters","ToastContainerModule","declarations","exports","ToastPackage","toastId","config","message","title","toastType","toastRef","_onTap","_onAction","afterClosed","subscribe","complete","triggerTap","next","tapToDismiss","onTap","asObservable","triggerAction","action","onAction","DefaultNoComponentGlobalConfig","maxOpened","autoDismiss","newestOnTop","preventDuplicates","countDuplicates","resetTimeoutOnDuplicate","includeTitleDuplicates","iconClasses","error","info","success","warning","closeButton","disableTimeOut","timeOut","extendedTimeOut","enableHtml","progressBar","toastClass","positionClass","titleClass","messageClass","easing","easeTime","onActivateTick","progressAnimation","TOAST_CONFIG","ComponentPortal","component","injector","attach","host","_attachedHost","detach","undefined","isAttached","setAttachedHost","BasePortalHost","portal","_attachedPortal","attachComponentPortal","_disposeFn","setDisposeFn","fn","DomPortalHost","_hostDomElement","_componentFactoryResolver","_appRef","componentFactory","resolveComponentFactory","componentRef","create","attachView","hostView","detachView","destroy","insertBefore","_getComponentRootNode","firstChild","appendChild","rootNodes","OverlayContainer","_document","ngOnDestroy","_containerElement","parentNode","removeChild","_createContainer","container","createElement","classList","add","body","ɵprov","factory","OverlayContainer_Factory","token","providedIn","OverlayRef","_portalHost","Overlay","_overlayContainer","_paneElements","Map","overlayContainer","_createOverlayRef","getPaneElement","get","set","_createPaneElement","pane","id","_createPortalHost","Overlay_Factory","ToastRef","_overlayRef","duplicatesCount","_afterClosed","_activate","_manualClose","_resetTimeout","_countDuplicate","manualClose","manualClosed","timeoutReset","countDuplicate","close","isInactive","isStopped","activate","afterActivate","onDuplicate","resetTimeout","ToastInjector","_toastPackage","_parentInjector","notFoundValue","flags","ToastrService","overlay","_injector","sanitizer","ngZone","currentlyActive","toasts","index","toastrConfig","Object","assign","default","show","override","_preBuildNotification","applyConfig","clear","toast","remove","found","_findToast","activeToast","splice","length","p","findDuplicate","resetOnDuplicate","hasDuplicateTitle","i","run","_buildNotification","toastComponent","Error","duplicate","previousToastMessage","keepInactive","overlayRef","sanitizedMessage","sanitize","HTML","toastPackage","toastInjector","componentInstance","instance","ins","onShown","onHidden","setTimeout","push","ToastrService_Factory","Toast","toastrService","width","toastClasses","value","params","options","originalTimeout","sub","activateToast","sub1","sub2","sub3","count","displayStyle","unsubscribe","clearInterval","intervalId","clearTimeout","timeout","outsideTimeout","hideTime","Date","getTime","outsideInterval","updateProgress","now","remaining","tapToast","stickAround","delayedHideToast","func","runOutsideAngular","runInsideAngular","setInterval","template","animations","opacity","preserveWhitespaces","propDecorators","DefaultGlobalConfig","ToastrModule","forRoot","ngModule","providers","provide","useValue","imports","entryComponents","ToastrComponentlessModule","ToastNoAnimation","appRef","tick","DefaultNoAnimationsGlobalConfig","ToastNoAnimationModule"],"sources":["C:/Users/brahim.homri/Desktop/inetum/Angular/AngularAuthYtUI/node_modules/ngx-toastr/fesm2015/ngx-toastr.js"],"sourcesContent":["import { Directive, ElementRef, NgModule, InjectionToken, ɵɵdefineInjectable, ɵɵinject, Injectable, Inject, ComponentFactoryResolver, ApplicationRef, SecurityContext, INJECTOR, NgZone, Injector, Component, HostBinding, HostListener } from '@angular/core';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { Subject } from 'rxjs';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { DOCUMENT, CommonModule } from '@angular/common';\n\nclass ToastContainerDirective {\n    constructor(el) {\n        this.el = el;\n    }\n    getContainerElement() {\n        return this.el.nativeElement;\n    }\n}\nToastContainerDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[toastContainer]',\n                exportAs: 'toastContainer',\n            },] }\n];\nToastContainerDirective.ctorParameters = () => [\n    { type: ElementRef }\n];\nclass ToastContainerModule {\n}\nToastContainerModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [ToastContainerDirective],\n                exports: [ToastContainerDirective],\n            },] }\n];\n\n/**\n * Everything a toast needs to launch\n */\nclass ToastPackage {\n    constructor(toastId, config, message, title, toastType, toastRef) {\n        this.toastId = toastId;\n        this.config = config;\n        this.message = message;\n        this.title = title;\n        this.toastType = toastType;\n        this.toastRef = toastRef;\n        this._onTap = new Subject();\n        this._onAction = new Subject();\n        this.toastRef.afterClosed().subscribe(() => {\n            this._onAction.complete();\n            this._onTap.complete();\n        });\n    }\n    /** Fired on click */\n    triggerTap() {\n        this._onTap.next();\n        if (this.config.tapToDismiss) {\n            this._onTap.complete();\n        }\n    }\n    onTap() {\n        return this._onTap.asObservable();\n    }\n    /** available for use in custom toast */\n    triggerAction(action) {\n        this._onAction.next(action);\n    }\n    onAction() {\n        return this._onAction.asObservable();\n    }\n}\nconst DefaultNoComponentGlobalConfig = {\n    maxOpened: 0,\n    autoDismiss: false,\n    newestOnTop: true,\n    preventDuplicates: false,\n    countDuplicates: false,\n    resetTimeoutOnDuplicate: false,\n    includeTitleDuplicates: false,\n    iconClasses: {\n        error: 'toast-error',\n        info: 'toast-info',\n        success: 'toast-success',\n        warning: 'toast-warning',\n    },\n    // Individual\n    closeButton: false,\n    disableTimeOut: false,\n    timeOut: 5000,\n    extendedTimeOut: 1000,\n    enableHtml: false,\n    progressBar: false,\n    toastClass: 'ngx-toastr',\n    positionClass: 'toast-top-right',\n    titleClass: 'toast-title',\n    messageClass: 'toast-message',\n    easing: 'ease-in',\n    easeTime: 300,\n    tapToDismiss: true,\n    onActivateTick: false,\n    progressAnimation: 'decreasing',\n};\nconst TOAST_CONFIG = new InjectionToken('ToastConfig');\n\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\nclass ComponentPortal {\n    constructor(component, injector) {\n        this.component = component;\n        this.injector = injector;\n    }\n    /** Attach this portal to a host. */\n    attach(host, newestOnTop) {\n        this._attachedHost = host;\n        return host.attach(this, newestOnTop);\n    }\n    /** Detach this portal from its host */\n    detach() {\n        const host = this._attachedHost;\n        if (host) {\n            this._attachedHost = undefined;\n            return host.detach();\n        }\n    }\n    /** Whether this portal is attached to a host. */\n    get isAttached() {\n        return this._attachedHost != null;\n    }\n    /**\n     * Sets the PortalHost reference without performing `attach()`. This is used directly by\n     * the PortalHost when it is performing an `attach()` or `detach()`.\n     */\n    setAttachedHost(host) {\n        this._attachedHost = host;\n    }\n}\n/**\n * Partial implementation of PortalHost that only deals with attaching a\n * ComponentPortal\n */\nclass BasePortalHost {\n    attach(portal, newestOnTop) {\n        this._attachedPortal = portal;\n        return this.attachComponentPortal(portal, newestOnTop);\n    }\n    detach() {\n        if (this._attachedPortal) {\n            this._attachedPortal.setAttachedHost();\n        }\n        this._attachedPortal = undefined;\n        if (this._disposeFn) {\n            this._disposeFn();\n            this._disposeFn = undefined;\n        }\n    }\n    setDisposeFn(fn) {\n        this._disposeFn = fn;\n    }\n}\n\n/**\n * A PortalHost for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n *\n * This is the only part of the portal core that directly touches the DOM.\n */\nclass DomPortalHost extends BasePortalHost {\n    constructor(_hostDomElement, _componentFactoryResolver, _appRef) {\n        super();\n        this._hostDomElement = _hostDomElement;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._appRef = _appRef;\n    }\n    /**\n     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n     * @param portal Portal to be attached\n     */\n    attachComponentPortal(portal, newestOnTop) {\n        const componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);\n        let componentRef;\n        // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n        // for the component (in terms of Angular's component tree, not rendering).\n        // When the ViewContainerRef is missing, we use the factory to create the component directly\n        // and then manually attach the ChangeDetector for that component to the application (which\n        // happens automatically when using a ViewContainer).\n        componentRef = componentFactory.create(portal.injector);\n        // When creating a component outside of a ViewContainer, we need to manually register\n        // its ChangeDetector with the application. This API is unfortunately not yet published\n        // in Angular core. The change detector must also be deregistered when the component\n        // is destroyed to prevent memory leaks.\n        this._appRef.attachView(componentRef.hostView);\n        this.setDisposeFn(() => {\n            this._appRef.detachView(componentRef.hostView);\n            componentRef.destroy();\n        });\n        // At this point the component has been instantiated, so we move it to the location in the DOM\n        // where we want it to be rendered.\n        if (newestOnTop) {\n            this._hostDomElement.insertBefore(this._getComponentRootNode(componentRef), this._hostDomElement.firstChild);\n        }\n        else {\n            this._hostDomElement.appendChild(this._getComponentRootNode(componentRef));\n        }\n        return componentRef;\n    }\n    /** Gets the root HTMLElement for an instantiated component. */\n    _getComponentRootNode(componentRef) {\n        return componentRef.hostView.rootNodes[0];\n    }\n}\n\n/** Container inside which all toasts will render. */\nclass OverlayContainer {\n    constructor(_document) {\n        this._document = _document;\n    }\n    ngOnDestroy() {\n        if (this._containerElement && this._containerElement.parentNode) {\n            this._containerElement.parentNode.removeChild(this._containerElement);\n        }\n    }\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time  it is called to facilitate using\n     * the container in non-browser environments.\n     * @returns the container element\n     */\n    getContainerElement() {\n        if (!this._containerElement) {\n            this._createContainer();\n        }\n        return this._containerElement;\n    }\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     */\n    _createContainer() {\n        const container = this._document.createElement('div');\n        container.classList.add('overlay-container');\n        this._document.body.appendChild(container);\n        this._containerElement = container;\n    }\n}\nOverlayContainer.ɵprov = ɵɵdefineInjectable({ factory: function OverlayContainer_Factory() { return new OverlayContainer(ɵɵinject(DOCUMENT)); }, token: OverlayContainer, providedIn: \"root\" });\nOverlayContainer.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] }\n];\nOverlayContainer.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nclass OverlayRef {\n    constructor(_portalHost) {\n        this._portalHost = _portalHost;\n    }\n    attach(portal, newestOnTop = true) {\n        return this._portalHost.attach(portal, newestOnTop);\n    }\n    /**\n     * Detaches an overlay from a portal.\n     * @returns Resolves when the overlay has been detached.\n     */\n    detach() {\n        return this._portalHost.detach();\n    }\n}\n\n/* tslint:disable:no-non-null-assertion */\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalHost, so any kind of Portal can be loaded into one.\n */\nclass Overlay {\n    constructor(_overlayContainer, _componentFactoryResolver, _appRef, _document) {\n        this._overlayContainer = _overlayContainer;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._appRef = _appRef;\n        this._document = _document;\n        // Namespace panes by overlay container\n        this._paneElements = new Map();\n    }\n    /**\n     * Creates an overlay.\n     * @returns A reference to the created overlay.\n     */\n    create(positionClass, overlayContainer) {\n        // get existing pane if possible\n        return this._createOverlayRef(this.getPaneElement(positionClass, overlayContainer));\n    }\n    getPaneElement(positionClass = '', overlayContainer) {\n        if (!this._paneElements.get(overlayContainer)) {\n            this._paneElements.set(overlayContainer, {});\n        }\n        if (!this._paneElements.get(overlayContainer)[positionClass]) {\n            this._paneElements.get(overlayContainer)[positionClass] = this._createPaneElement(positionClass, overlayContainer);\n        }\n        return this._paneElements.get(overlayContainer)[positionClass];\n    }\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @returns Newly-created pane element\n     */\n    _createPaneElement(positionClass, overlayContainer) {\n        const pane = this._document.createElement('div');\n        pane.id = 'toast-container';\n        pane.classList.add(positionClass);\n        pane.classList.add('toast-container');\n        if (!overlayContainer) {\n            this._overlayContainer.getContainerElement().appendChild(pane);\n        }\n        else {\n            overlayContainer.getContainerElement().appendChild(pane);\n        }\n        return pane;\n    }\n    /**\n     * Create a DomPortalHost into which the overlay content can be loaded.\n     * @param pane The DOM element to turn into a portal host.\n     * @returns A portal host for the given DOM element.\n     */\n    _createPortalHost(pane) {\n        return new DomPortalHost(pane, this._componentFactoryResolver, this._appRef);\n    }\n    /**\n     * Creates an OverlayRef for an overlay in the given DOM element.\n     * @param pane DOM element for the overlay\n     */\n    _createOverlayRef(pane) {\n        return new OverlayRef(this._createPortalHost(pane));\n    }\n}\nOverlay.ɵprov = ɵɵdefineInjectable({ factory: function Overlay_Factory() { return new Overlay(ɵɵinject(OverlayContainer), ɵɵinject(ComponentFactoryResolver), ɵɵinject(ApplicationRef), ɵɵinject(DOCUMENT)); }, token: Overlay, providedIn: \"root\" });\nOverlay.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] }\n];\nOverlay.ctorParameters = () => [\n    { type: OverlayContainer },\n    { type: ComponentFactoryResolver },\n    { type: ApplicationRef },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n\n/**\n * Reference to a toast opened via the Toastr service.\n */\nclass ToastRef {\n    constructor(_overlayRef) {\n        this._overlayRef = _overlayRef;\n        /** Count of duplicates of this toast */\n        this.duplicatesCount = 0;\n        /** Subject for notifying the user that the toast has finished closing. */\n        this._afterClosed = new Subject();\n        /** triggered when toast is activated */\n        this._activate = new Subject();\n        /** notifies the toast that it should close before the timeout */\n        this._manualClose = new Subject();\n        /** notifies the toast that it should reset the timeouts */\n        this._resetTimeout = new Subject();\n        /** notifies the toast that it should count a duplicate toast */\n        this._countDuplicate = new Subject();\n    }\n    manualClose() {\n        this._manualClose.next();\n        this._manualClose.complete();\n    }\n    manualClosed() {\n        return this._manualClose.asObservable();\n    }\n    timeoutReset() {\n        return this._resetTimeout.asObservable();\n    }\n    countDuplicate() {\n        return this._countDuplicate.asObservable();\n    }\n    /**\n     * Close the toast.\n     */\n    close() {\n        this._overlayRef.detach();\n        this._afterClosed.next();\n        this._manualClose.next();\n        this._afterClosed.complete();\n        this._manualClose.complete();\n        this._activate.complete();\n        this._resetTimeout.complete();\n        this._countDuplicate.complete();\n    }\n    /** Gets an observable that is notified when the toast is finished closing. */\n    afterClosed() {\n        return this._afterClosed.asObservable();\n    }\n    isInactive() {\n        return this._activate.isStopped;\n    }\n    activate() {\n        this._activate.next();\n        this._activate.complete();\n    }\n    /** Gets an observable that is notified when the toast has started opening. */\n    afterActivate() {\n        return this._activate.asObservable();\n    }\n    /** Reset the toast timouts and count duplicates */\n    onDuplicate(resetTimeout, countDuplicate) {\n        if (resetTimeout) {\n            this._resetTimeout.next();\n        }\n        if (countDuplicate) {\n            this._countDuplicate.next(++this.duplicatesCount);\n        }\n    }\n}\n/** Custom injector type specifically for instantiating components with a toast. */\nclass ToastInjector {\n    constructor(_toastPackage, _parentInjector) {\n        this._toastPackage = _toastPackage;\n        this._parentInjector = _parentInjector;\n    }\n    get(token, notFoundValue, flags) {\n        if (token === ToastPackage) {\n            return this._toastPackage;\n        }\n        return this._parentInjector.get(token, notFoundValue, flags);\n    }\n}\n\nclass ToastrService {\n    constructor(token, overlay, _injector, sanitizer, ngZone) {\n        this.overlay = overlay;\n        this._injector = _injector;\n        this.sanitizer = sanitizer;\n        this.ngZone = ngZone;\n        this.currentlyActive = 0;\n        this.toasts = [];\n        this.index = 0;\n        this.toastrConfig = Object.assign(Object.assign({}, token.default), token.config);\n        if (token.config.iconClasses) {\n            this.toastrConfig.iconClasses = Object.assign(Object.assign({}, token.default.iconClasses), token.config.iconClasses);\n        }\n    }\n    /** show toast */\n    show(message, title, override = {}, type = '') {\n        return this._preBuildNotification(type, message, title, this.applyConfig(override));\n    }\n    /** show successful toast */\n    success(message, title, override = {}) {\n        const type = this.toastrConfig.iconClasses.success || '';\n        return this._preBuildNotification(type, message, title, this.applyConfig(override));\n    }\n    /** show error toast */\n    error(message, title, override = {}) {\n        const type = this.toastrConfig.iconClasses.error || '';\n        return this._preBuildNotification(type, message, title, this.applyConfig(override));\n    }\n    /** show info toast */\n    info(message, title, override = {}) {\n        const type = this.toastrConfig.iconClasses.info || '';\n        return this._preBuildNotification(type, message, title, this.applyConfig(override));\n    }\n    /** show warning toast */\n    warning(message, title, override = {}) {\n        const type = this.toastrConfig.iconClasses.warning || '';\n        return this._preBuildNotification(type, message, title, this.applyConfig(override));\n    }\n    /**\n     * Remove all or a single toast by id\n     */\n    clear(toastId) {\n        // Call every toastRef manualClose function\n        for (const toast of this.toasts) {\n            if (toastId !== undefined) {\n                if (toast.toastId === toastId) {\n                    toast.toastRef.manualClose();\n                    return;\n                }\n            }\n            else {\n                toast.toastRef.manualClose();\n            }\n        }\n    }\n    /**\n     * Remove and destroy a single toast by id\n     */\n    remove(toastId) {\n        const found = this._findToast(toastId);\n        if (!found) {\n            return false;\n        }\n        found.activeToast.toastRef.close();\n        this.toasts.splice(found.index, 1);\n        this.currentlyActive = this.currentlyActive - 1;\n        if (!this.toastrConfig.maxOpened || !this.toasts.length) {\n            return false;\n        }\n        if (this.currentlyActive < this.toastrConfig.maxOpened && this.toasts[this.currentlyActive]) {\n            const p = this.toasts[this.currentlyActive].toastRef;\n            if (!p.isInactive()) {\n                this.currentlyActive = this.currentlyActive + 1;\n                p.activate();\n            }\n        }\n        return true;\n    }\n    /**\n     * Determines if toast message is already shown\n     */\n    findDuplicate(title = '', message = '', resetOnDuplicate, countDuplicates) {\n        const { includeTitleDuplicates } = this.toastrConfig;\n        for (const toast of this.toasts) {\n            const hasDuplicateTitle = includeTitleDuplicates && toast.title === title;\n            if ((!includeTitleDuplicates || hasDuplicateTitle) && toast.message === message) {\n                toast.toastRef.onDuplicate(resetOnDuplicate, countDuplicates);\n                return toast;\n            }\n        }\n        return null;\n    }\n    /** create a clone of global config and apply individual settings */\n    applyConfig(override = {}) {\n        return Object.assign(Object.assign({}, this.toastrConfig), override);\n    }\n    /**\n     * Find toast object by id\n     */\n    _findToast(toastId) {\n        for (let i = 0; i < this.toasts.length; i++) {\n            if (this.toasts[i].toastId === toastId) {\n                return { index: i, activeToast: this.toasts[i] };\n            }\n        }\n        return null;\n    }\n    /**\n     * Determines the need to run inside angular's zone then builds the toast\n     */\n    _preBuildNotification(toastType, message, title, config) {\n        if (config.onActivateTick) {\n            return this.ngZone.run(() => this._buildNotification(toastType, message, title, config));\n        }\n        return this._buildNotification(toastType, message, title, config);\n    }\n    /**\n     * Creates and attaches toast data to component\n     * returns the active toast, or in case preventDuplicates is enabled the original/non-duplicate active toast.\n     */\n    _buildNotification(toastType, message, title, config) {\n        if (!config.toastComponent) {\n            throw new Error('toastComponent required');\n        }\n        // max opened and auto dismiss = true\n        // if timeout = 0 resetting it would result in setting this.hideTime = Date.now(). Hence, we only want to reset timeout if there is\n        // a timeout at all\n        const duplicate = this.findDuplicate(title, message, this.toastrConfig.resetTimeoutOnDuplicate && config.timeOut > 0, this.toastrConfig.countDuplicates);\n        if (((this.toastrConfig.includeTitleDuplicates && title) || message) &&\n            this.toastrConfig.preventDuplicates &&\n            duplicate !== null) {\n            return duplicate;\n        }\n        this.previousToastMessage = message;\n        let keepInactive = false;\n        if (this.toastrConfig.maxOpened && this.currentlyActive >= this.toastrConfig.maxOpened) {\n            keepInactive = true;\n            if (this.toastrConfig.autoDismiss) {\n                this.clear(this.toasts[0].toastId);\n            }\n        }\n        const overlayRef = this.overlay.create(config.positionClass, this.overlayContainer);\n        this.index = this.index + 1;\n        let sanitizedMessage = message;\n        if (message && config.enableHtml) {\n            sanitizedMessage = this.sanitizer.sanitize(SecurityContext.HTML, message);\n        }\n        const toastRef = new ToastRef(overlayRef);\n        const toastPackage = new ToastPackage(this.index, config, sanitizedMessage, title, toastType, toastRef);\n        const toastInjector = new ToastInjector(toastPackage, this._injector);\n        const component = new ComponentPortal(config.toastComponent, toastInjector);\n        const portal = overlayRef.attach(component, this.toastrConfig.newestOnTop);\n        toastRef.componentInstance = portal.instance;\n        const ins = {\n            toastId: this.index,\n            title: title || '',\n            message: message || '',\n            toastRef,\n            onShown: toastRef.afterActivate(),\n            onHidden: toastRef.afterClosed(),\n            onTap: toastPackage.onTap(),\n            onAction: toastPackage.onAction(),\n            portal,\n        };\n        if (!keepInactive) {\n            this.currentlyActive = this.currentlyActive + 1;\n            setTimeout(() => {\n                ins.toastRef.activate();\n            });\n        }\n        this.toasts.push(ins);\n        return ins;\n    }\n}\nToastrService.ɵprov = ɵɵdefineInjectable({ factory: function ToastrService_Factory() { return new ToastrService(ɵɵinject(TOAST_CONFIG), ɵɵinject(Overlay), ɵɵinject(INJECTOR), ɵɵinject(DomSanitizer), ɵɵinject(NgZone)); }, token: ToastrService, providedIn: \"root\" });\nToastrService.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] }\n];\nToastrService.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [TOAST_CONFIG,] }] },\n    { type: Overlay },\n    { type: Injector },\n    { type: DomSanitizer },\n    { type: NgZone }\n];\n\nclass Toast {\n    constructor(toastrService, toastPackage, ngZone) {\n        this.toastrService = toastrService;\n        this.toastPackage = toastPackage;\n        this.ngZone = ngZone;\n        /** width of progress bar */\n        this.width = -1;\n        /** a combination of toast type and options.toastClass */\n        this.toastClasses = '';\n        /** controls animation */\n        this.state = {\n            value: 'inactive',\n            params: {\n                easeTime: this.toastPackage.config.easeTime,\n                easing: 'ease-in'\n            }\n        };\n        this.message = toastPackage.message;\n        this.title = toastPackage.title;\n        this.options = toastPackage.config;\n        this.originalTimeout = toastPackage.config.timeOut;\n        this.toastClasses = `${toastPackage.toastType} ${toastPackage.config.toastClass}`;\n        this.sub = toastPackage.toastRef.afterActivate().subscribe(() => {\n            this.activateToast();\n        });\n        this.sub1 = toastPackage.toastRef.manualClosed().subscribe(() => {\n            this.remove();\n        });\n        this.sub2 = toastPackage.toastRef.timeoutReset().subscribe(() => {\n            this.resetTimeout();\n        });\n        this.sub3 = toastPackage.toastRef.countDuplicate().subscribe(count => {\n            this.duplicatesCount = count;\n        });\n    }\n    /** hides component when waiting to be displayed */\n    get displayStyle() {\n        if (this.state.value === 'inactive') {\n            return 'none';\n        }\n        return;\n    }\n    ngOnDestroy() {\n        this.sub.unsubscribe();\n        this.sub1.unsubscribe();\n        this.sub2.unsubscribe();\n        this.sub3.unsubscribe();\n        clearInterval(this.intervalId);\n        clearTimeout(this.timeout);\n    }\n    /**\n     * activates toast and sets timeout\n     */\n    activateToast() {\n        this.state = Object.assign(Object.assign({}, this.state), { value: 'active' });\n        if (!(this.options.disableTimeOut === true || this.options.disableTimeOut === 'timeOut') && this.options.timeOut) {\n            this.outsideTimeout(() => this.remove(), this.options.timeOut);\n            this.hideTime = new Date().getTime() + this.options.timeOut;\n            if (this.options.progressBar) {\n                this.outsideInterval(() => this.updateProgress(), 10);\n            }\n        }\n    }\n    /**\n     * updates progress bar width\n     */\n    updateProgress() {\n        if (this.width === 0 || this.width === 100 || !this.options.timeOut) {\n            return;\n        }\n        const now = new Date().getTime();\n        const remaining = this.hideTime - now;\n        this.width = (remaining / this.options.timeOut) * 100;\n        if (this.options.progressAnimation === 'increasing') {\n            this.width = 100 - this.width;\n        }\n        if (this.width <= 0) {\n            this.width = 0;\n        }\n        if (this.width >= 100) {\n            this.width = 100;\n        }\n    }\n    resetTimeout() {\n        clearTimeout(this.timeout);\n        clearInterval(this.intervalId);\n        this.state = Object.assign(Object.assign({}, this.state), { value: 'active' });\n        this.outsideTimeout(() => this.remove(), this.originalTimeout);\n        this.options.timeOut = this.originalTimeout;\n        this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n        this.width = -1;\n        if (this.options.progressBar) {\n            this.outsideInterval(() => this.updateProgress(), 10);\n        }\n    }\n    /**\n     * tells toastrService to remove this toast after animation time\n     */\n    remove() {\n        if (this.state.value === 'removed') {\n            return;\n        }\n        clearTimeout(this.timeout);\n        this.state = Object.assign(Object.assign({}, this.state), { value: 'removed' });\n        this.outsideTimeout(() => this.toastrService.remove(this.toastPackage.toastId), +this.toastPackage.config.easeTime);\n    }\n    tapToast() {\n        if (this.state.value === 'removed') {\n            return;\n        }\n        this.toastPackage.triggerTap();\n        if (this.options.tapToDismiss) {\n            this.remove();\n        }\n    }\n    stickAround() {\n        if (this.state.value === 'removed') {\n            return;\n        }\n        clearTimeout(this.timeout);\n        this.options.timeOut = 0;\n        this.hideTime = 0;\n        // disable progressBar\n        clearInterval(this.intervalId);\n        this.width = 0;\n    }\n    delayedHideToast() {\n        if ((this.options.disableTimeOut === true || this.options.disableTimeOut === 'extendedTimeOut') ||\n            this.options.extendedTimeOut === 0 ||\n            this.state.value === 'removed') {\n            return;\n        }\n        this.outsideTimeout(() => this.remove(), this.options.extendedTimeOut);\n        this.options.timeOut = this.options.extendedTimeOut;\n        this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n        this.width = -1;\n        if (this.options.progressBar) {\n            this.outsideInterval(() => this.updateProgress(), 10);\n        }\n    }\n    outsideTimeout(func, timeout) {\n        if (this.ngZone) {\n            this.ngZone.runOutsideAngular(() => (this.timeout = setTimeout(() => this.runInsideAngular(func), timeout)));\n        }\n        else {\n            this.timeout = setTimeout(() => func(), timeout);\n        }\n    }\n    outsideInterval(func, timeout) {\n        if (this.ngZone) {\n            this.ngZone.runOutsideAngular(() => (this.intervalId = setInterval(() => this.runInsideAngular(func), timeout)));\n        }\n        else {\n            this.intervalId = setInterval(() => func(), timeout);\n        }\n    }\n    runInsideAngular(func) {\n        if (this.ngZone) {\n            this.ngZone.run(() => func());\n        }\n        else {\n            func();\n        }\n    }\n}\nToast.decorators = [\n    { type: Component, args: [{\n                selector: '[toast-component]',\n                template: `\n  <button *ngIf=\"options.closeButton\" (click)=\"remove()\" class=\"toast-close-button\" aria-label=\"Close\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n  <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n    {{ title }} <ng-container *ngIf=\"duplicatesCount\">[{{ duplicatesCount + 1 }}]</ng-container>\n  </div>\n  <div *ngIf=\"message && options.enableHtml\" role=\"alertdialog\" aria-live=\"polite\"\n    [class]=\"options.messageClass\" [innerHTML]=\"message\">\n  </div>\n  <div *ngIf=\"message && !options.enableHtml\" role=\"alertdialog\" aria-live=\"polite\"\n    [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n    {{ message }}\n  </div>\n  <div *ngIf=\"options.progressBar\">\n    <div class=\"toast-progress\" [style.width]=\"width + '%'\"></div>\n  </div>\n  `,\n                animations: [\n                    trigger('flyInOut', [\n                        state('inactive', style({ opacity: 0 })),\n                        state('active', style({ opacity: 1 })),\n                        state('removed', style({ opacity: 0 })),\n                        transition('inactive => active', animate('{{ easeTime }}ms {{ easing }}')),\n                        transition('active => removed', animate('{{ easeTime }}ms {{ easing }}'))\n                    ])\n                ],\n                preserveWhitespaces: false\n            },] }\n];\nToast.ctorParameters = () => [\n    { type: ToastrService },\n    { type: ToastPackage },\n    { type: NgZone }\n];\nToast.propDecorators = {\n    toastClasses: [{ type: HostBinding, args: ['class',] }],\n    state: [{ type: HostBinding, args: ['@flyInOut',] }],\n    displayStyle: [{ type: HostBinding, args: ['style.display',] }],\n    tapToast: [{ type: HostListener, args: ['click',] }],\n    stickAround: [{ type: HostListener, args: ['mouseenter',] }],\n    delayedHideToast: [{ type: HostListener, args: ['mouseleave',] }]\n};\n\nconst DefaultGlobalConfig = Object.assign(Object.assign({}, DefaultNoComponentGlobalConfig), { toastComponent: Toast });\nclass ToastrModule {\n    static forRoot(config = {}) {\n        return {\n            ngModule: ToastrModule,\n            providers: [\n                {\n                    provide: TOAST_CONFIG,\n                    useValue: {\n                        default: DefaultGlobalConfig,\n                        config,\n                    },\n                },\n            ],\n        };\n    }\n}\nToastrModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule],\n                declarations: [Toast],\n                exports: [Toast],\n                entryComponents: [Toast],\n            },] }\n];\nclass ToastrComponentlessModule {\n    static forRoot(config = {}) {\n        return {\n            ngModule: ToastrModule,\n            providers: [\n                {\n                    provide: TOAST_CONFIG,\n                    useValue: {\n                        default: DefaultNoComponentGlobalConfig,\n                        config,\n                    },\n                },\n            ],\n        };\n    }\n}\nToastrComponentlessModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule],\n            },] }\n];\n\nclass ToastNoAnimation {\n    constructor(toastrService, toastPackage, appRef) {\n        this.toastrService = toastrService;\n        this.toastPackage = toastPackage;\n        this.appRef = appRef;\n        /** width of progress bar */\n        this.width = -1;\n        /** a combination of toast type and options.toastClass */\n        this.toastClasses = '';\n        /** controls animation */\n        this.state = 'inactive';\n        this.message = toastPackage.message;\n        this.title = toastPackage.title;\n        this.options = toastPackage.config;\n        this.originalTimeout = toastPackage.config.timeOut;\n        this.toastClasses = `${toastPackage.toastType} ${toastPackage.config.toastClass}`;\n        this.sub = toastPackage.toastRef.afterActivate().subscribe(() => {\n            this.activateToast();\n        });\n        this.sub1 = toastPackage.toastRef.manualClosed().subscribe(() => {\n            this.remove();\n        });\n        this.sub2 = toastPackage.toastRef.timeoutReset().subscribe(() => {\n            this.resetTimeout();\n        });\n        this.sub3 = toastPackage.toastRef.countDuplicate().subscribe(count => {\n            this.duplicatesCount = count;\n        });\n    }\n    /** hides component when waiting to be displayed */\n    get displayStyle() {\n        if (this.state === 'inactive') {\n            return 'none';\n        }\n    }\n    ngOnDestroy() {\n        this.sub.unsubscribe();\n        this.sub1.unsubscribe();\n        this.sub2.unsubscribe();\n        this.sub3.unsubscribe();\n        clearInterval(this.intervalId);\n        clearTimeout(this.timeout);\n    }\n    /**\n     * activates toast and sets timeout\n     */\n    activateToast() {\n        this.state = 'active';\n        if (!(this.options.disableTimeOut === true || this.options.disableTimeOut === 'timeOut') && this.options.timeOut) {\n            this.timeout = setTimeout(() => {\n                this.remove();\n            }, this.options.timeOut);\n            this.hideTime = new Date().getTime() + this.options.timeOut;\n            if (this.options.progressBar) {\n                this.intervalId = setInterval(() => this.updateProgress(), 10);\n            }\n        }\n        if (this.options.onActivateTick) {\n            this.appRef.tick();\n        }\n    }\n    /**\n     * updates progress bar width\n     */\n    updateProgress() {\n        if (this.width === 0 || this.width === 100 || !this.options.timeOut) {\n            return;\n        }\n        const now = new Date().getTime();\n        const remaining = this.hideTime - now;\n        this.width = (remaining / this.options.timeOut) * 100;\n        if (this.options.progressAnimation === 'increasing') {\n            this.width = 100 - this.width;\n        }\n        if (this.width <= 0) {\n            this.width = 0;\n        }\n        if (this.width >= 100) {\n            this.width = 100;\n        }\n    }\n    resetTimeout() {\n        clearTimeout(this.timeout);\n        clearInterval(this.intervalId);\n        this.state = 'active';\n        this.options.timeOut = this.originalTimeout;\n        this.timeout = setTimeout(() => this.remove(), this.originalTimeout);\n        this.hideTime = new Date().getTime() + (this.originalTimeout || 0);\n        this.width = -1;\n        if (this.options.progressBar) {\n            this.intervalId = setInterval(() => this.updateProgress(), 10);\n        }\n    }\n    /**\n     * tells toastrService to remove this toast after animation time\n     */\n    remove() {\n        if (this.state === 'removed') {\n            return;\n        }\n        clearTimeout(this.timeout);\n        this.state = 'removed';\n        this.timeout = setTimeout(() => this.toastrService.remove(this.toastPackage.toastId));\n    }\n    tapToast() {\n        if (this.state === 'removed') {\n            return;\n        }\n        this.toastPackage.triggerTap();\n        if (this.options.tapToDismiss) {\n            this.remove();\n        }\n    }\n    stickAround() {\n        if (this.state === 'removed') {\n            return;\n        }\n        clearTimeout(this.timeout);\n        this.options.timeOut = 0;\n        this.hideTime = 0;\n        // disable progressBar\n        clearInterval(this.intervalId);\n        this.width = 0;\n    }\n    delayedHideToast() {\n        if ((this.options.disableTimeOut === true || this.options.disableTimeOut === 'extendedTimeOut') ||\n            this.options.extendedTimeOut === 0 ||\n            this.state === 'removed') {\n            return;\n        }\n        this.timeout = setTimeout(() => this.remove(), this.options.extendedTimeOut);\n        this.options.timeOut = this.options.extendedTimeOut;\n        this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n        this.width = -1;\n        if (this.options.progressBar) {\n            this.intervalId = setInterval(() => this.updateProgress(), 10);\n        }\n    }\n}\nToastNoAnimation.decorators = [\n    { type: Component, args: [{\n                selector: '[toast-component]',\n                template: `\n  <button *ngIf=\"options.closeButton\" (click)=\"remove()\" class=\"toast-close-button\" aria-label=\"Close\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n  <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n    {{ title }} <ng-container *ngIf=\"duplicatesCount\">[{{ duplicatesCount + 1 }}]</ng-container>\n  </div>\n  <div *ngIf=\"message && options.enableHtml\" role=\"alert\" aria-live=\"polite\"\n    [class]=\"options.messageClass\" [innerHTML]=\"message\">\n  </div>\n  <div *ngIf=\"message && !options.enableHtml\" role=\"alert\" aria-live=\"polite\"\n    [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n    {{ message }}\n  </div>\n  <div *ngIf=\"options.progressBar\">\n    <div class=\"toast-progress\" [style.width]=\"width + '%'\"></div>\n  </div>\n  `\n            },] }\n];\nToastNoAnimation.ctorParameters = () => [\n    { type: ToastrService },\n    { type: ToastPackage },\n    { type: ApplicationRef }\n];\nToastNoAnimation.propDecorators = {\n    toastClasses: [{ type: HostBinding, args: ['class',] }],\n    displayStyle: [{ type: HostBinding, args: ['style.display',] }],\n    tapToast: [{ type: HostListener, args: ['click',] }],\n    stickAround: [{ type: HostListener, args: ['mouseenter',] }],\n    delayedHideToast: [{ type: HostListener, args: ['mouseleave',] }]\n};\nconst DefaultNoAnimationsGlobalConfig = Object.assign(Object.assign({}, DefaultNoComponentGlobalConfig), { toastComponent: ToastNoAnimation });\nclass ToastNoAnimationModule {\n    static forRoot(config = {}) {\n        return {\n            ngModule: ToastNoAnimationModule,\n            providers: [\n                {\n                    provide: TOAST_CONFIG,\n                    useValue: {\n                        default: DefaultNoAnimationsGlobalConfig,\n                        config,\n                    },\n                },\n            ],\n        };\n    }\n}\nToastNoAnimationModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule],\n                declarations: [ToastNoAnimation],\n                exports: [ToastNoAnimation],\n                entryComponents: [ToastNoAnimation],\n            },] }\n];\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BasePortalHost, ComponentPortal, DefaultGlobalConfig, DefaultNoAnimationsGlobalConfig, DefaultNoComponentGlobalConfig, Overlay, OverlayContainer, OverlayRef, TOAST_CONFIG, Toast, ToastContainerDirective, ToastContainerModule, ToastInjector, ToastNoAnimation, ToastNoAnimationModule, ToastPackage, ToastRef, ToastrComponentlessModule, ToastrModule, ToastrService };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}